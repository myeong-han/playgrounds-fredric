# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ "${PS1-}" ]; then
  if [ "${BASH-}" ] && [ "$BASH" != "/bin/sh" ]; then
    # The file bash.bashrc already sets the default PS1.
    # PS1='\h:\w\$ '
    if [ -f /etc/bash.bashrc ]; then
      . /etc/bash.bashrc
    fi
  else
    if [ "$(id -u)" -eq 0 ]; then
      PS1='# '
    else
      PS1='$ '
    fi
  fi
fi

if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi

source <(kubectl completion bash)
source <(helm completion bash)
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PATH="$PATH:/home/mhkim/istio-1.20.0/bin"
export PATH="$PATH:/home/mhkim/.linkerd2/bin"
export scripthome="$HOME/playgrounds-fredric/_shellscripts"
export iachome="$HOME/playgrounds-fredric/iac"
export apphome="$HOME/playgrounds-fredric/app-modules"
export k3sconfig="/etc/rancher/k3s"
export k3shome="/var/lib/rancher/k3s"
_crictl() {
    local cur opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts="attach
create
exec
version
images
image
img
inspect
inspecti
imagefsinfo
inspectp
logs
port-forward
ps
pull
run
runp
rm
rmi
rmp
pods
start
info
stop
stopp
update
config
stats
statsp
completion
checkpoint
help
h
--config
--debug
--image-endpoint
--runtime-endpoint
--timeout
--help
--version"
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}

complete -F _crictl crictl

# bash completion for linkerd                              -*- shell-script -*-

__linkerd_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__linkerd_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__linkerd_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__linkerd_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__linkerd_handle_go_custom_completion()
{
    __linkerd_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly linkerd allows handling aliases
    args=("${words[@]:1}")
    # Disable ActiveHelp which is not supported for bash completion v1
    requestComp="LINKERD_ACTIVE_HELP=0 ${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __linkerd_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __linkerd_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __linkerd_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __linkerd_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __linkerd_debug "${FUNCNAME[0]}: the completions are: ${out}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __linkerd_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __linkerd_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __linkerd_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __linkerd_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out}")
        if [ -n "$subdir" ]; then
            __linkerd_debug "Listing directories in $subdir"
            __linkerd_handle_subdirs_in_dir_flag "$subdir"
        else
            __linkerd_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out}" -- "$cur")
    fi
}

__linkerd_handle_reply()
{
    __linkerd_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __linkerd_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION:-}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi

            if [[ -z "${flag_parsing_disabled}" ]]; then
                # If flag parsing is enabled, we have completed the flags and can return.
                # If flag parsing is disabled, we may not know all (or any) of the flags, so we fallthrough
                # to possibly call handle_go_custom_completion.
                return 0;
            fi
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __linkerd_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __linkerd_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
        if declare -F __linkerd_custom_func >/dev/null; then
            # try command name qualified custom func
            __linkerd_custom_func
        else
            # otherwise fall back to unqualified for compatibility
            declare -F __custom_func >/dev/null && __custom_func
        fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__linkerd_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__linkerd_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__linkerd_handle_flag()
{
    __linkerd_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue=""
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __linkerd_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __linkerd_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __linkerd_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __linkerd_contains_word "${words[c]}" "${two_word_flags[@]}"; then
        __linkerd_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__linkerd_handle_noun()
{
    __linkerd_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __linkerd_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __linkerd_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__linkerd_handle_command()
{
    __linkerd_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_linkerd_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __linkerd_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__linkerd_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __linkerd_handle_reply
        return
    fi
    __linkerd_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __linkerd_handle_flag
    elif __linkerd_contains_word "${words[c]}" "${commands[@]}"; then
        __linkerd_handle_command
    elif [[ $c -eq 0 ]]; then
        __linkerd_handle_command
    elif __linkerd_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __linkerd_handle_command
        else
            __linkerd_handle_noun
        fi
    else
        __linkerd_handle_noun
    fi
    __linkerd_handle_word
}

_linkerd_authz()
{
    last_command="linkerd_authz"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_check()
{
    last_command="linkerd_check"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--cli-version-override=")
    two_word_flags+=("--cli-version-override")
    flags+=("--crds")
    local_nonpersistent_flags+=("--crds")
    flags+=("--expected-version=")
    two_word_flags+=("--expected-version")
    flags+=("--linkerd-cni-enabled")
    local_nonpersistent_flags+=("--linkerd-cni-enabled")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--pre")
    local_nonpersistent_flags+=("--pre")
    flags+=("--proxy")
    local_nonpersistent_flags+=("--proxy")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_completion()
{
    last_command="linkerd_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("fish")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_linkerd_diagnostics_controller-metrics()
{
    last_command="linkerd_diagnostics_controller-metrics"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--wait=")
    two_word_flags+=("--wait")
    two_word_flags+=("-w")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    local_nonpersistent_flags+=("-w")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_diagnostics_endpoints()
{
    last_command="linkerd_diagnostics_endpoints"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--destination-pod=")
    two_word_flags+=("--destination-pod")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--token=")
    two_word_flags+=("--token")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_diagnostics_policy()
{
    last_command="linkerd_diagnostics_policy"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--destination-pod=")
    two_word_flags+=("--destination-pod")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_diagnostics_proxy-metrics()
{
    last_command="linkerd_diagnostics_proxy-metrics"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--obfuscate")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_diagnostics()
{
    last_command="linkerd_diagnostics"

    command_aliases=()

    commands=()
    commands+=("controller-metrics")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("cp-metrics")
        aliashash["cp-metrics"]="controller-metrics"
    fi
    commands+=("endpoints")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("ep")
        aliashash["ep"]="endpoints"
    fi
    commands+=("policy")
    commands+=("proxy-metrics")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_help()
{
    last_command="linkerd_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_identity()
{
    last_command="linkerd_identity"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_inject()
{
    last_command="linkerd_inject"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--admin-port=")
    two_word_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port=")
    flags+=("--close-wait-timeout=")
    two_word_flags+=("--close-wait-timeout")
    local_nonpersistent_flags+=("--close-wait-timeout")
    local_nonpersistent_flags+=("--close-wait-timeout=")
    flags+=("--control-port=")
    two_word_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port=")
    flags+=("--default-inbound-policy=")
    two_word_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy=")
    flags+=("--enable-debug-sidecar")
    local_nonpersistent_flags+=("--enable-debug-sidecar")
    flags+=("--enable-external-profiles")
    local_nonpersistent_flags+=("--enable-external-profiles")
    flags+=("--ignore-cluster")
    local_nonpersistent_flags+=("--ignore-cluster")
    flags+=("--inbound-port=")
    two_word_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port=")
    flags+=("--ingress")
    local_nonpersistent_flags+=("--ingress")
    flags+=("--manual")
    local_nonpersistent_flags+=("--manual")
    flags+=("--native-sidecar")
    local_nonpersistent_flags+=("--native-sidecar")
    flags+=("--opaque-ports=")
    two_word_flags+=("--opaque-ports")
    local_nonpersistent_flags+=("--opaque-ports")
    local_nonpersistent_flags+=("--opaque-ports=")
    flags+=("--outbound-port=")
    two_word_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port=")
    flags+=("--proxy-cpu-limit=")
    two_word_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit=")
    flags+=("--proxy-cpu-request=")
    two_word_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request=")
    flags+=("--proxy-log-level=")
    two_word_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level=")
    flags+=("--proxy-memory-limit=")
    two_word_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit=")
    flags+=("--proxy-memory-request=")
    two_word_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request=")
    flags+=("--proxy-uid=")
    two_word_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid=")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    local_nonpersistent_flags+=("--registry")
    local_nonpersistent_flags+=("--registry=")
    flags+=("--require-identity-on-inbound-ports=")
    two_word_flags+=("--require-identity-on-inbound-ports")
    local_nonpersistent_flags+=("--require-identity-on-inbound-ports")
    local_nonpersistent_flags+=("--require-identity-on-inbound-ports=")
    flags+=("--skip-inbound-ports=")
    two_word_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports=")
    flags+=("--skip-outbound-ports=")
    two_word_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports=")
    flags+=("--wait-before-exit-seconds=")
    two_word_flags+=("--wait-before-exit-seconds")
    local_nonpersistent_flags+=("--wait-before-exit-seconds")
    local_nonpersistent_flags+=("--wait-before-exit-seconds=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_install()
{
    last_command="linkerd_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--admin-port=")
    two_word_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port=")
    flags+=("--cluster-domain=")
    two_word_flags+=("--cluster-domain")
    local_nonpersistent_flags+=("--cluster-domain")
    local_nonpersistent_flags+=("--cluster-domain=")
    flags+=("--control-port=")
    two_word_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port=")
    flags+=("--controller-log-level=")
    two_word_flags+=("--controller-log-level")
    local_nonpersistent_flags+=("--controller-log-level")
    local_nonpersistent_flags+=("--controller-log-level=")
    flags+=("--controller-replicas=")
    two_word_flags+=("--controller-replicas")
    local_nonpersistent_flags+=("--controller-replicas")
    local_nonpersistent_flags+=("--controller-replicas=")
    flags+=("--controller-uid=")
    two_word_flags+=("--controller-uid")
    local_nonpersistent_flags+=("--controller-uid")
    local_nonpersistent_flags+=("--controller-uid=")
    flags+=("--crds")
    local_nonpersistent_flags+=("--crds")
    flags+=("--default-inbound-policy=")
    two_word_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy=")
    flags+=("--disable-h2-upgrade")
    local_nonpersistent_flags+=("--disable-h2-upgrade")
    flags+=("--disable-heartbeat")
    local_nonpersistent_flags+=("--disable-heartbeat")
    flags+=("--enable-endpoint-slices")
    local_nonpersistent_flags+=("--enable-endpoint-slices")
    flags+=("--enable-external-profiles")
    local_nonpersistent_flags+=("--enable-external-profiles")
    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--identity-clock-skew-allowance=")
    two_word_flags+=("--identity-clock-skew-allowance")
    local_nonpersistent_flags+=("--identity-clock-skew-allowance")
    local_nonpersistent_flags+=("--identity-clock-skew-allowance=")
    flags+=("--identity-external-ca")
    local_nonpersistent_flags+=("--identity-external-ca")
    flags+=("--identity-external-issuer")
    local_nonpersistent_flags+=("--identity-external-issuer")
    flags+=("--identity-issuance-lifetime=")
    two_word_flags+=("--identity-issuance-lifetime")
    local_nonpersistent_flags+=("--identity-issuance-lifetime")
    local_nonpersistent_flags+=("--identity-issuance-lifetime=")
    flags+=("--identity-issuer-certificate-file=")
    two_word_flags+=("--identity-issuer-certificate-file")
    local_nonpersistent_flags+=("--identity-issuer-certificate-file")
    local_nonpersistent_flags+=("--identity-issuer-certificate-file=")
    flags+=("--identity-issuer-key-file=")
    two_word_flags+=("--identity-issuer-key-file")
    local_nonpersistent_flags+=("--identity-issuer-key-file")
    local_nonpersistent_flags+=("--identity-issuer-key-file=")
    flags+=("--identity-trust-anchors-file=")
    two_word_flags+=("--identity-trust-anchors-file")
    local_nonpersistent_flags+=("--identity-trust-anchors-file")
    local_nonpersistent_flags+=("--identity-trust-anchors-file=")
    flags+=("--identity-trust-domain=")
    two_word_flags+=("--identity-trust-domain")
    local_nonpersistent_flags+=("--identity-trust-domain")
    local_nonpersistent_flags+=("--identity-trust-domain=")
    flags+=("--ignore-cluster")
    flags+=("--inbound-port=")
    two_word_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port=")
    flags+=("--linkerd-cni-enabled")
    local_nonpersistent_flags+=("--linkerd-cni-enabled")
    flags+=("--outbound-port=")
    two_word_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port=")
    flags+=("--proxy-cpu-limit=")
    two_word_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit=")
    flags+=("--proxy-cpu-request=")
    two_word_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request=")
    flags+=("--proxy-log-level=")
    two_word_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level=")
    flags+=("--proxy-memory-limit=")
    two_word_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit=")
    flags+=("--proxy-memory-request=")
    two_word_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request=")
    flags+=("--proxy-uid=")
    two_word_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid=")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    local_nonpersistent_flags+=("--registry")
    local_nonpersistent_flags+=("--registry=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-inbound-ports=")
    two_word_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports=")
    flags+=("--skip-outbound-ports=")
    two_word_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_install-cni()
{
    last_command="linkerd_install-cni"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--admin-port=")
    two_word_flags+=("--admin-port")
    flags+=("--cni-image=")
    two_word_flags+=("--cni-image")
    flags+=("--cni-image-version=")
    two_word_flags+=("--cni-image-version")
    flags+=("--cni-log-level=")
    two_word_flags+=("--cni-log-level")
    flags+=("--control-port=")
    two_word_flags+=("--control-port")
    flags+=("--dest-cni-bin-dir=")
    two_word_flags+=("--dest-cni-bin-dir")
    flags+=("--dest-cni-net-dir=")
    two_word_flags+=("--dest-cni-net-dir")
    flags+=("--inbound-port=")
    two_word_flags+=("--inbound-port")
    flags+=("--linkerd-version=")
    two_word_flags+=("--linkerd-version")
    two_word_flags+=("-v")
    flags+=("--outbound-port=")
    two_word_flags+=("--outbound-port")
    flags+=("--priority-class-name=")
    two_word_flags+=("--priority-class-name")
    flags+=("--proxy-uid=")
    two_word_flags+=("--proxy-uid")
    flags+=("--redirect-ports=")
    two_word_flags+=("--redirect-ports")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-inbound-ports=")
    two_word_flags+=("--skip-inbound-ports")
    flags+=("--skip-outbound-ports=")
    two_word_flags+=("--skip-outbound-ports")
    flags+=("--use-wait-flag")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_check()
{
    last_command="linkerd_jaeger_check"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--proxy")
    local_nonpersistent_flags+=("--proxy")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_dashboard()
{
    last_command="linkerd_jaeger_dashboard"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--address=")
    two_word_flags+=("--address")
    flags+=("--port=")
    two_word_flags+=("--port")
    two_word_flags+=("-p")
    flags+=("--show-url")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_install()
{
    last_command="linkerd_jaeger_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ignore-cluster")
    local_nonpersistent_flags+=("--ignore-cluster")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    local_nonpersistent_flags+=("--registry")
    local_nonpersistent_flags+=("--registry=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-checks")
    local_nonpersistent_flags+=("--skip-checks")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_list()
{
    last_command="linkerd_jaeger_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_prune()
{
    last_command="linkerd_jaeger_prune"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger_uninstall()
{
    last_command="linkerd_jaeger_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_jaeger()
{
    last_command="linkerd_jaeger"

    command_aliases=()

    commands=()
    commands+=("check")
    commands+=("dashboard")
    commands+=("install")
    commands+=("list")
    commands+=("prune")
    commands+=("uninstall")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_allow()
{
    last_command="linkerd_multicluster_allow"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ignore-cluster")
    local_nonpersistent_flags+=("--ignore-cluster")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--service-account-name=")
    two_word_flags+=("--service-account-name")
    local_nonpersistent_flags+=("--service-account-name")
    local_nonpersistent_flags+=("--service-account-name=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_check()
{
    last_command="linkerd_multicluster_check"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_gateways()
{
    last_command="linkerd_multicluster_gateways"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--cluster-name=")
    two_word_flags+=("--cluster-name")
    local_nonpersistent_flags+=("--cluster-name")
    local_nonpersistent_flags+=("--cluster-name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    two_word_flags+=("-w")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    local_nonpersistent_flags+=("-w")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_install()
{
    last_command="linkerd_multicluster_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--gateway")
    local_nonpersistent_flags+=("--gateway")
    flags+=("--gateway-port=")
    two_word_flags+=("--gateway-port")
    local_nonpersistent_flags+=("--gateway-port")
    local_nonpersistent_flags+=("--gateway-port=")
    flags+=("--gateway-probe-port=")
    two_word_flags+=("--gateway-probe-port")
    local_nonpersistent_flags+=("--gateway-probe-port")
    local_nonpersistent_flags+=("--gateway-probe-port=")
    flags+=("--gateway-probe-seconds=")
    two_word_flags+=("--gateway-probe-seconds")
    local_nonpersistent_flags+=("--gateway-probe-seconds")
    local_nonpersistent_flags+=("--gateway-probe-seconds=")
    flags+=("--gateway-service-type=")
    two_word_flags+=("--gateway-service-type")
    local_nonpersistent_flags+=("--gateway-service-type")
    local_nonpersistent_flags+=("--gateway-service-type=")
    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--ignore-cluster")
    local_nonpersistent_flags+=("--ignore-cluster")
    flags+=("--service-mirror-credentials")
    local_nonpersistent_flags+=("--service-mirror-credentials")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_link()
{
    last_command="linkerd_multicluster_link"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-server-address=")
    two_word_flags+=("--api-server-address")
    local_nonpersistent_flags+=("--api-server-address")
    local_nonpersistent_flags+=("--api-server-address=")
    flags+=("--cluster-name=")
    two_word_flags+=("--cluster-name")
    local_nonpersistent_flags+=("--cluster-name")
    local_nonpersistent_flags+=("--cluster-name=")
    flags+=("--control-plane-version=")
    two_word_flags+=("--control-plane-version")
    local_nonpersistent_flags+=("--control-plane-version")
    local_nonpersistent_flags+=("--control-plane-version=")
    flags+=("--gateway")
    local_nonpersistent_flags+=("--gateway")
    flags+=("--gateway-addresses=")
    two_word_flags+=("--gateway-addresses")
    local_nonpersistent_flags+=("--gateway-addresses")
    local_nonpersistent_flags+=("--gateway-addresses=")
    flags+=("--gateway-name=")
    two_word_flags+=("--gateway-name")
    local_nonpersistent_flags+=("--gateway-name")
    local_nonpersistent_flags+=("--gateway-name=")
    flags+=("--gateway-namespace=")
    two_word_flags+=("--gateway-namespace")
    flags_with_completion+=("--gateway-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--gateway-namespace")
    local_nonpersistent_flags+=("--gateway-namespace=")
    flags+=("--gateway-port=")
    two_word_flags+=("--gateway-port")
    local_nonpersistent_flags+=("--gateway-port")
    local_nonpersistent_flags+=("--gateway-port=")
    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--log-format=")
    two_word_flags+=("--log-format")
    local_nonpersistent_flags+=("--log-format")
    local_nonpersistent_flags+=("--log-format=")
    flags+=("--log-level=")
    two_word_flags+=("--log-level")
    local_nonpersistent_flags+=("--log-level")
    local_nonpersistent_flags+=("--log-level=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    local_nonpersistent_flags+=("--registry")
    local_nonpersistent_flags+=("--registry=")
    flags+=("--remote-discovery-selector=")
    two_word_flags+=("--remote-discovery-selector")
    local_nonpersistent_flags+=("--remote-discovery-selector")
    local_nonpersistent_flags+=("--remote-discovery-selector=")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--selector")
    local_nonpersistent_flags+=("--selector=")
    local_nonpersistent_flags+=("-l")
    flags+=("--service-account-name=")
    two_word_flags+=("--service-account-name")
    local_nonpersistent_flags+=("--service-account-name")
    local_nonpersistent_flags+=("--service-account-name=")
    flags+=("--service-mirror-retry-limit=")
    two_word_flags+=("--service-mirror-retry-limit")
    local_nonpersistent_flags+=("--service-mirror-retry-limit")
    local_nonpersistent_flags+=("--service-mirror-retry-limit=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_uninstall()
{
    last_command="linkerd_multicluster_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster_unlink()
{
    last_command="linkerd_multicluster_unlink"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--cluster-name=")
    two_word_flags+=("--cluster-name")
    flags_with_completion+=("--cluster-name")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--cluster-name")
    local_nonpersistent_flags+=("--cluster-name=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_multicluster()
{
    last_command="linkerd_multicluster"

    command_aliases=()

    commands=()
    commands+=("allow")
    commands+=("check")
    commands+=("gateways")
    commands+=("install")
    commands+=("link")
    commands+=("uninstall")
    commands+=("unlink")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_profile()
{
    last_command="linkerd_profile"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ignore-cluster")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    flags+=("--open-api=")
    two_word_flags+=("--open-api")
    flags+=("--proto=")
    two_word_flags+=("--proto")
    flags+=("--template")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_prune()
{
    last_command="linkerd_prune"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_uninject()
{
    last_command="linkerd_uninject"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_uninstall()
{
    last_command="linkerd_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--force")
    flags+=("-f")
    local_nonpersistent_flags+=("--force")
    local_nonpersistent_flags+=("-f")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_upgrade()
{
    last_command="linkerd_upgrade"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--admin-port=")
    two_word_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port")
    local_nonpersistent_flags+=("--admin-port=")
    flags+=("--control-port=")
    two_word_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port")
    local_nonpersistent_flags+=("--control-port=")
    flags+=("--controller-log-level=")
    two_word_flags+=("--controller-log-level")
    local_nonpersistent_flags+=("--controller-log-level")
    local_nonpersistent_flags+=("--controller-log-level=")
    flags+=("--controller-replicas=")
    two_word_flags+=("--controller-replicas")
    local_nonpersistent_flags+=("--controller-replicas")
    local_nonpersistent_flags+=("--controller-replicas=")
    flags+=("--controller-uid=")
    two_word_flags+=("--controller-uid")
    local_nonpersistent_flags+=("--controller-uid")
    local_nonpersistent_flags+=("--controller-uid=")
    flags+=("--crds")
    local_nonpersistent_flags+=("--crds")
    flags+=("--default-inbound-policy=")
    two_word_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy")
    local_nonpersistent_flags+=("--default-inbound-policy=")
    flags+=("--disable-h2-upgrade")
    local_nonpersistent_flags+=("--disable-h2-upgrade")
    flags+=("--disable-heartbeat")
    local_nonpersistent_flags+=("--disable-heartbeat")
    flags+=("--enable-endpoint-slices")
    local_nonpersistent_flags+=("--enable-endpoint-slices")
    flags+=("--enable-external-profiles")
    local_nonpersistent_flags+=("--enable-external-profiles")
    flags+=("--force")
    flags+=("--from-manifests=")
    two_word_flags+=("--from-manifests")
    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--identity-clock-skew-allowance=")
    two_word_flags+=("--identity-clock-skew-allowance")
    local_nonpersistent_flags+=("--identity-clock-skew-allowance")
    local_nonpersistent_flags+=("--identity-clock-skew-allowance=")
    flags+=("--identity-issuance-lifetime=")
    two_word_flags+=("--identity-issuance-lifetime")
    local_nonpersistent_flags+=("--identity-issuance-lifetime")
    local_nonpersistent_flags+=("--identity-issuance-lifetime=")
    flags+=("--identity-issuer-certificate-file=")
    two_word_flags+=("--identity-issuer-certificate-file")
    local_nonpersistent_flags+=("--identity-issuer-certificate-file")
    local_nonpersistent_flags+=("--identity-issuer-certificate-file=")
    flags+=("--identity-issuer-key-file=")
    two_word_flags+=("--identity-issuer-key-file")
    local_nonpersistent_flags+=("--identity-issuer-key-file")
    local_nonpersistent_flags+=("--identity-issuer-key-file=")
    flags+=("--identity-trust-anchors-file=")
    two_word_flags+=("--identity-trust-anchors-file")
    local_nonpersistent_flags+=("--identity-trust-anchors-file")
    local_nonpersistent_flags+=("--identity-trust-anchors-file=")
    flags+=("--inbound-port=")
    two_word_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port")
    local_nonpersistent_flags+=("--inbound-port=")
    flags+=("--linkerd-cni-enabled")
    local_nonpersistent_flags+=("--linkerd-cni-enabled")
    flags+=("--outbound-port=")
    two_word_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port")
    local_nonpersistent_flags+=("--outbound-port=")
    flags+=("--proxy-cpu-limit=")
    two_word_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit")
    local_nonpersistent_flags+=("--proxy-cpu-limit=")
    flags+=("--proxy-cpu-request=")
    two_word_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request")
    local_nonpersistent_flags+=("--proxy-cpu-request=")
    flags+=("--proxy-log-level=")
    two_word_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level")
    local_nonpersistent_flags+=("--proxy-log-level=")
    flags+=("--proxy-memory-limit=")
    two_word_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit")
    local_nonpersistent_flags+=("--proxy-memory-limit=")
    flags+=("--proxy-memory-request=")
    two_word_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request")
    local_nonpersistent_flags+=("--proxy-memory-request=")
    flags+=("--proxy-uid=")
    two_word_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid")
    local_nonpersistent_flags+=("--proxy-uid=")
    flags+=("--registry=")
    two_word_flags+=("--registry")
    local_nonpersistent_flags+=("--registry")
    local_nonpersistent_flags+=("--registry=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-inbound-ports=")
    two_word_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports")
    local_nonpersistent_flags+=("--skip-inbound-ports=")
    flags+=("--skip-outbound-ports=")
    two_word_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports")
    local_nonpersistent_flags+=("--skip-outbound-ports=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_version()
{
    last_command="linkerd_version"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--client")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    flags+=("--proxy")
    flags+=("--short")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_allow-scrapes()
{
    last_command="linkerd_viz_allow-scrapes"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_authz()
{
    last_command="linkerd_viz_authz"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--time-window=")
    two_word_flags+=("--time-window")
    two_word_flags+=("-t")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_check()
{
    last_command="linkerd_viz_check"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--proxy")
    local_nonpersistent_flags+=("--proxy")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_dashboard()
{
    last_command="linkerd_viz_dashboard"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--address=")
    two_word_flags+=("--address")
    flags+=("--port=")
    two_word_flags+=("--port")
    two_word_flags+=("-p")
    flags+=("--show=")
    two_word_flags+=("--show")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_edges()
{
    last_command="linkerd_viz_edges"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_install()
{
    last_command="linkerd_viz_install"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--ignore-cluster")
    local_nonpersistent_flags+=("--ignore-cluster")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--skip-checks")
    local_nonpersistent_flags+=("--skip-checks")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_list()
{
    last_command="linkerd_viz_list"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    local_nonpersistent_flags+=("--all-namespaces")
    local_nonpersistent_flags+=("-A")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    local_nonpersistent_flags+=("-n")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_profile()
{
    last_command="linkerd_viz_profile"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--tap=")
    two_word_flags+=("--tap")
    flags+=("--tap-duration=")
    two_word_flags+=("--tap-duration")
    flags+=("--tap-route-limit=")
    two_word_flags+=("--tap-route-limit")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_prune()
{
    last_command="linkerd_viz_prune"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--ha")
    local_nonpersistent_flags+=("--ha")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--values=")
    two_word_flags+=("--values")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    local_nonpersistent_flags+=("-f")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz_routes()
{
    last_command="linkerd_viz_routes"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--time-window=")
    two_word_flags+=("--time-window")
    two_word_flags+=("-t")
    flags+=("--to=")
    two_word_flags+=("--to")
    flags+=("--to-namespace=")
    two_word_flags+=("--to-namespace")
    flags_with_completion+=("--to-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("authority")
    must_have_one_noun+=("cronjob")
    must_have_one_noun+=("daemonset")
    must_have_one_noun+=("deployment")
    must_have_one_noun+=("job")
    must_have_one_noun+=("namespace")
    must_have_one_noun+=("pod")
    must_have_one_noun+=("replicaset")
    must_have_one_noun+=("replicationcontroller")
    must_have_one_noun+=("statefulset")
    noun_aliases=()
}

_linkerd_viz_stat()
{
    last_command="linkerd_viz_stat"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    flags+=("-A")
    flags+=("--from=")
    two_word_flags+=("--from")
    flags+=("--from-namespace=")
    two_word_flags+=("--from-namespace")
    flags_with_completion+=("--from-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--time-window=")
    two_word_flags+=("--time-window")
    two_word_flags+=("-t")
    flags+=("--to=")
    two_word_flags+=("--to")
    flags+=("--to-namespace=")
    two_word_flags+=("--to-namespace")
    flags_with_completion+=("--to-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--unmeshed")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_tap()
{
    last_command="linkerd_viz_tap"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--authority=")
    two_word_flags+=("--authority")
    flags+=("--max-rps=")
    two_word_flags+=("--max-rps")
    flags+=("--method=")
    two_word_flags+=("--method")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    flags+=("--path=")
    two_word_flags+=("--path")
    flags+=("--scheme=")
    two_word_flags+=("--scheme")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--to=")
    two_word_flags+=("--to")
    flags+=("--to-namespace=")
    two_word_flags+=("--to-namespace")
    flags_with_completion+=("--to-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_top()
{
    last_command="linkerd_viz_top"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--authority=")
    two_word_flags+=("--authority")
    flags+=("--hide-sources")
    flags+=("--max-rps=")
    two_word_flags+=("--max-rps")
    flags+=("--method=")
    two_word_flags+=("--method")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    flags_with_completion+=("--namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-n")
    flags_with_completion+=("-n")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--path=")
    two_word_flags+=("--path")
    flags+=("--routes")
    flags+=("--scheme=")
    two_word_flags+=("--scheme")
    flags+=("--selector=")
    two_word_flags+=("--selector")
    two_word_flags+=("-l")
    flags+=("--to=")
    two_word_flags+=("--to")
    flags+=("--to-namespace=")
    two_word_flags+=("--to-namespace")
    flags_with_completion+=("--to-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_linkerd_viz_uninstall()
{
    last_command="linkerd_viz_uninstall"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_viz()
{
    last_command="linkerd_viz"

    command_aliases=()

    commands=()
    commands+=("allow-scrapes")
    commands+=("authz")
    commands+=("check")
    commands+=("dashboard")
    commands+=("edges")
    commands+=("install")
    commands+=("list")
    commands+=("profile")
    commands+=("prune")
    commands+=("routes")
    commands+=("stat")
    commands+=("tap")
    commands+=("top")
    commands+=("uninstall")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")
    flags+=("--viz-namespace=")
    two_word_flags+=("--viz-namespace")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_linkerd_root_command()
{
    last_command="linkerd"

    command_aliases=()

    commands=()
    commands+=("authz")
    commands+=("check")
    commands+=("completion")
    commands+=("diagnostics")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("dg")
        aliashash["dg"]="diagnostics"
    fi
    commands+=("help")
    commands+=("identity")
    commands+=("inject")
    commands+=("install")
    commands+=("install-cni")
    commands+=("jaeger")
    commands+=("multicluster")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("mc")
        aliashash["mc"]="multicluster"
    fi
    commands+=("profile")
    commands+=("prune")
    commands+=("uninject")
    commands+=("uninstall")
    commands+=("upgrade")
    commands+=("version")
    commands+=("viz")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--api-addr=")
    two_word_flags+=("--api-addr")
    flags+=("--as=")
    two_word_flags+=("--as")
    flags+=("--as-group=")
    two_word_flags+=("--as-group")
    flags+=("--cni-namespace=")
    two_word_flags+=("--cni-namespace")
    flags_with_completion+=("--cni-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags_with_completion+=("--context")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--linkerd-namespace=")
    two_word_flags+=("--linkerd-namespace")
    flags_with_completion+=("--linkerd-namespace")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    two_word_flags+=("-L")
    flags_with_completion+=("-L")
    flags_completion+=("__linkerd_handle_go_custom_completion")
    flags+=("--verbose")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_linkerd()
{
    local cur prev words cword split
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __linkerd_init_completion -n "=" || return
    fi

    local c=0
    local flag_parsing_disabled=
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("linkerd")
    local command_aliases=()
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function=""
    local last_command=""
    local nouns=()
    local noun_aliases=()

    __linkerd_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_linkerd linkerd
else
    complete -o default -o nospace -F __start_linkerd linkerd
fi

# ex: ts=4 sw=4 et filetype=sh
alias k=kubectl
complete -F __start_kubectl k
# bash completion V2 for istioctl                             -*- shell-script -*-

__istioctl_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE-} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Macs have bash3 for which the bash-completion package doesn't include
# _init_completion. This is a minimal version of that function.
__istioctl_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

# This function calls the istioctl program to obtain the completion
# results and the directive.  It fills the 'out' and 'directive' vars.
__istioctl_get_completion_results() {
    local requestComp lastParam lastChar args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly istioctl allows handling aliases
    args=("${words[@]:1}")
    requestComp="${words[0]} __complete ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __istioctl_debug "lastParam ${lastParam}, lastChar ${lastChar}"

    if [[ -z ${cur} && ${lastChar} != = ]]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __istioctl_debug "Adding extra empty parameter"
        requestComp="${requestComp} ''"
    fi

    # When completing a flag with an = (e.g., istioctl -n=<TAB>)
    # bash focuses on the part after the =, so we need to remove
    # the flag part from $cur
    if [[ ${cur} == -*=* ]]; then
        cur="${cur#*=}"
    fi

    __istioctl_debug "Calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [[ ${directive} == "${out}" ]]; then
        # There is not directive specified
        directive=0
    fi
    __istioctl_debug "The completion directive is: ${directive}"
    __istioctl_debug "The completions are: ${out}"
}

__istioctl_process_completion_results() {
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16
    local shellCompDirectiveKeepOrder=32

    if (((directive & shellCompDirectiveError) != 0)); then
        # Error code.  No completion.
        __istioctl_debug "Received error from custom completion go code"
        return
    else
        if (((directive & shellCompDirectiveNoSpace) != 0)); then
            if [[ $(type -t compopt) == builtin ]]; then
                __istioctl_debug "Activating no space"
                compopt -o nospace
            else
                __istioctl_debug "No space directive not supported in this version of bash"
            fi
        fi
        if (((directive & shellCompDirectiveKeepOrder) != 0)); then
            if [[ $(type -t compopt) == builtin ]]; then
                # no sort isn't supported for bash less than < 4.4
                if [[ ${BASH_VERSINFO[0]} -lt 4 || ( ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -lt 4 ) ]]; then
                    __istioctl_debug "No sort directive not supported in this version of bash"
                else
                    __istioctl_debug "Activating keep order"
                    compopt -o nosort
                fi
            else
                __istioctl_debug "No sort directive not supported in this version of bash"
            fi
        fi
        if (((directive & shellCompDirectiveNoFileComp) != 0)); then
            if [[ $(type -t compopt) == builtin ]]; then
                __istioctl_debug "Activating no file completion"
                compopt +o default
            else
                __istioctl_debug "No file completion directive not supported in this version of bash"
            fi
        fi
    fi

    # Separate activeHelp from normal completions
    local completions=()
    local activeHelp=()
    __istioctl_extract_activeHelp

    if (((directive & shellCompDirectiveFilterFileExt) != 0)); then
        # File extension filtering
        local fullFilter filter filteringCmd

        # Do not use quotes around the $completions variable or else newline
        # characters will be kept.
        for filter in ${completions[*]}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __istioctl_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif (((directive & shellCompDirectiveFilterDirs) != 0)); then
        # File completion for directories only

        local subdir
        subdir=${completions[0]}
        if [[ -n $subdir ]]; then
            __istioctl_debug "Listing directories in $subdir"
            pushd "$subdir" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
        else
            __istioctl_debug "Listing directories in ."
            _filedir -d
        fi
    else
        __istioctl_handle_completion_types
    fi

    __istioctl_handle_special_char "$cur" :
    __istioctl_handle_special_char "$cur" =

    # Print the activeHelp statements before we finish
    if ((${#activeHelp[*]} != 0)); then
        printf "\n";
        printf "%s\n" "${activeHelp[@]}"
        printf "\n"

        # The prompt format is only available from bash 4.4.
        # We test if it is available before using it.
        if (x=${PS1@P}) 2> /dev/null; then
            printf "%s" "${PS1@P}${COMP_LINE[@]}"
        else
            # Can't print the prompt.  Just print the
            # text the user had typed, it is workable enough.
            printf "%s" "${COMP_LINE[@]}"
        fi
    fi
}

# Separate activeHelp lines from real completions.
# Fills the $activeHelp and $completions arrays.
__istioctl_extract_activeHelp() {
    local activeHelpMarker="_activeHelp_ "
    local endIndex=${#activeHelpMarker}

    while IFS='' read -r comp; do
        if [[ ${comp:0:endIndex} == $activeHelpMarker ]]; then
            comp=${comp:endIndex}
            __istioctl_debug "ActiveHelp found: $comp"
            if [[ -n $comp ]]; then
                activeHelp+=("$comp")
            fi
        else
            # Not an activeHelp line but a normal completion
            completions+=("$comp")
        fi
    done <<<"${out}"
}

__istioctl_handle_completion_types() {
    __istioctl_debug "__istioctl_handle_completion_types: COMP_TYPE is $COMP_TYPE"

    case $COMP_TYPE in
    37|42)
        # Type: menu-complete/menu-complete-backward and insert-completions
        # If the user requested inserting one completion at a time, or all
        # completions at once on the command-line we must remove the descriptions.
        # https://github.com/spf13/cobra/issues/1508
        local tab=$'\t' comp
        while IFS='' read -r comp; do
            [[ -z $comp ]] && continue
            # Strip any description
            comp=${comp%%$tab*}
            # Only consider the completions that match
            if [[ $comp == "$cur"* ]]; then
                COMPREPLY+=("$comp")
            fi
        done < <(printf "%s\n" "${completions[@]}")
        ;;

    *)
        # Type: complete (normal completion)
        __istioctl_handle_standard_completion_case
        ;;
    esac
}

__istioctl_handle_standard_completion_case() {
    local tab=$'\t' comp

    # Short circuit to optimize if we don't have descriptions
    if [[ "${completions[*]}" != *$tab* ]]; then
        IFS=$'\n' read -ra COMPREPLY -d '' < <(compgen -W "${completions[*]}" -- "$cur")
        return 0
    fi

    local longest=0
    local compline
    # Look for the longest completion so that we can format things nicely
    while IFS='' read -r compline; do
        [[ -z $compline ]] && continue
        # Strip any description before checking the length
        comp=${compline%%$tab*}
        # Only consider the completions that match
        [[ $comp == "$cur"* ]] || continue
        COMPREPLY+=("$compline")
        if ((${#comp}>longest)); then
            longest=${#comp}
        fi
    done < <(printf "%s\n" "${completions[@]}")

    # If there is a single completion left, remove the description text
    if ((${#COMPREPLY[*]} == 1)); then
        __istioctl_debug "COMPREPLY[0]: ${COMPREPLY[0]}"
        comp="${COMPREPLY[0]%%$tab*}"
        __istioctl_debug "Removed description from single completion, which is now: ${comp}"
        COMPREPLY[0]=$comp
    else # Format the descriptions
        __istioctl_format_comp_descriptions $longest
    fi
}

__istioctl_handle_special_char()
{
    local comp="$1"
    local char=$2
    if [[ "$comp" == *${char}* && "$COMP_WORDBREAKS" == *${char}* ]]; then
        local word=${comp%"${comp##*${char}}"}
        local idx=${#COMPREPLY[*]}
        while ((--idx >= 0)); do
            COMPREPLY[idx]=${COMPREPLY[idx]#"$word"}
        done
    fi
}

__istioctl_format_comp_descriptions()
{
    local tab=$'\t'
    local comp desc maxdesclength
    local longest=$1

    local i ci
    for ci in ${!COMPREPLY[*]}; do
        comp=${COMPREPLY[ci]}
        # Properly format the description string which follows a tab character if there is one
        if [[ "$comp" == *$tab* ]]; then
            __istioctl_debug "Original comp: $comp"
            desc=${comp#*$tab}
            comp=${comp%%$tab*}

            # $COLUMNS stores the current shell width.
            # Remove an extra 4 because we add 2 spaces and 2 parentheses.
            maxdesclength=$(( COLUMNS - longest - 4 ))

            # Make sure we can fit a description of at least 8 characters
            # if we are to align the descriptions.
            if ((maxdesclength > 8)); then
                # Add the proper number of spaces to align the descriptions
                for ((i = ${#comp} ; i < longest ; i++)); do
                    comp+=" "
                done
            else
                # Don't pad the descriptions so we can fit more text after the completion
                maxdesclength=$(( COLUMNS - ${#comp} - 4 ))
            fi

            # If there is enough space for any description text,
            # truncate the descriptions that are too long for the shell width
            if ((maxdesclength > 0)); then
                if ((${#desc} > maxdesclength)); then
                    desc=${desc:0:$(( maxdesclength - 1 ))}
                    desc+="…"
                fi
                comp+="  ($desc)"
            fi
            COMPREPLY[ci]=$comp
            __istioctl_debug "Final comp: $comp"
        fi
    done
}

__start_istioctl()
{
    local cur prev words cword split

    COMPREPLY=()

    # Call _init_completion from the bash-completion package
    # to prepare the arguments properly
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -n =: || return
    else
        __istioctl_init_completion -n =: || return
    fi

    __istioctl_debug
    __istioctl_debug "========= starting completion logic =========="
    __istioctl_debug "cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}, cword is $cword"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $cword location, so we need
    # to truncate the command-line ($words) up to the $cword location.
    words=("${words[@]:0:$cword+1}")
    __istioctl_debug "Truncated words[*]: ${words[*]},"

    local out directive
    __istioctl_get_completion_results
    __istioctl_process_completion_results
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_istioctl istioctl
else
    complete -o default -o nospace -F __start_istioctl istioctl
fi

# ex: ts=4 sw=4 et filetype=sh

export INFISICAL_API_URL="https://vault.fredric.playground.cld/api"
